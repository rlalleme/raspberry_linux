Installation Raspberry Pi
-------------------------

Install all the tools in the raspbian to have it customised



Requirements
------------
-A computer with Linux (called COMP from now on)
-A raspberry and an SD card with at least 4Go (called respectively RASP
 and SD)
-The SD must be ready from the step in file '01_prepare_the_linux'



Foreword
--------
Reminder:
$ command to be run by the user (default: pi)
# command to be run by root

Some of the command take lots of time, if you want to start them using ssh but
still be able to disconnect from the ssh session (to turn off COMP for instance)
then see the Appendix at the end of this file



Prepare the Linux users
-----------------------
Once the RASP Linux has started, from COMP connect to RASP
$ ssh pi@<rasppi_address>

First thing first, configure the root passwd to allow remote connection as root
$ sudo su
# passwd
You will be prompted for the new password for root.

It is possible to enable password prompting for the sudo command for more
security (this step can be skipped).
# vim /etc/sudoers
Comment out the line "pi ALL=(ALL) NOPASSWD: ALL"

From now on to turn into root (for command with #), just call 'sudo su'
And to come back to the normal user Ctrl-D, or directly connect to RASP as root.

Before continuing, it is best to "activate" the RASP by calling raspi-config,
otherwise this software will pop-up at every boot.
$ sudo raspi-config

Simply select the '<Finish>' button, it will propose to reboot the card, do it.



Configure the basic tools
-------------------------
Reconnect as 'pi', and start by installing some basic software
Prepare the software list
$ sudo apt-get update
$ sudo apt-get upgrade
The last command can be a bit long since it updates all the packages from the
raspbian to the current version they have.

And install some programming tools (add any software that may be useful)
$ sudo apt-get install vim build-essential cmake libboost-all-dev git nano
This command can take several minutes

Now configure the locale
$ sudo vim /etc/locale.gen
Uncomment the line necessary for your needs, e.g. fr_FR.UTF-8 UTF-8
(Warning this next command is really long, see Appendix)
$ sudo locale-gen



Install ROS
-----------
Bootstrap the ros install
$ sudo apt-get install python-setuptools
$ sudo easy_install pip
$ sudo pip install -U rosdep rosinstall_generator wstool rosinstall

Switch to root user
Initialise the rosdep
# rosdep init
# rosdep fix-permissions
# rosdep update
	(This command takes some minutes)

Create the catkin workspace
# mkdir /opt/ros-src
# cd /opt/ros-src
# rosinstall_generator ros_comm --rosdistro indigo --deps --wet-only --exclude roslisp --tar > indigo-ros_comm-wet.rosinstall
	(This command takes some minutes)
# wstool init src indigo-ros_comm-wet.rosinstall

Install the dependencies
# apt-get install checkinstall
# git clone https://github.com/ros/console_bridge.git
# cd console_bridge
# cmake .
# checkinstall make install
	The sequence of input is:
	<Enter> - to create the documentation
	<Enter> - to create an empty description
	2 - to change the name
	libconsole-bridge-dev - to give the new name
	<Enter> - validate the name

Now get some other dependencies
# cd ..
# wget http://archive.raspbian.org/raspbian/pool/main/l/lz4/liblz4-1_0.0~r122-2_armhf.deb
# wget http://archive.raspbian.org/raspbian/pool/main/l/lz4/liblz4-dev_0.0~r122-2_armhf.deb
# dpkg -i liblz4-1_0.0~r122-2_armhf.deb liblz4-dev_0.0~r122-2_armhf.deb

Start the ROS install
(Warning this command is bit long)
# rosdep install --from-paths src --ignore-src --rosdistro indigo -y -r --os=debian:wheezy
(Warning very long command, see Appendix)
# ./src/catkin/bin/catkin_make_isolated --install -DCMAKE_BUILD_TYPE=Release --install-space /opt/ros/indigo



Configure the environment
-------------------------
Now configure the environment
$ cd ~
$ vim .bashrc
Add the line:
source /opt/ros/indigo/setup.bash
$ source .bashrc
(You can repeat those operations for the root user)

Create the workspace
$ mkdir -p ros/src
$ cd ros/src
$ catkin_init_workspace
$ cd ..
$ catkin_make
It will initialise the directory (no source needed in src)
(Again you can repeat those operations for the root user)

Now you can add this new workspace to the environment
$ cd ~
$ vim .bashrc
Add the line:
source ${HOME}/ros/devel/setup.bash
(Again you can repeat those operations for the root user)

Finally if you want to remotely connect ROS nodes to the raspberry, for instance
to have remote processes and so on. Then configure the ROS variables:
$ export ROS_IP="<ip_of_the_raspberry>"
$ export ROS_MASTER_URI="http://<ip_of_the_raspberry>:11311"
Added by default to the ~/.bashrc but commented out.



Install WiringPi
----------------
Now to install wiringPi, first switch to root user
$ sudo su
# cd /tmp
# git clone https://github.com/rlalleme/wiringPi.git
# cd wiringPi
# mkdir build-arm
# cd build-arm
# cmake .. -DCMAKE_INSTALL_PREFIX="/usr/"
# make
# make install
	(Since all those operations were done in /tmp the file will disappear)



Next step
---------
Now that everything is done, you can continue to the 'create_image' to turn this
working SD install into a ready-to-copy disk image. If you just want to use this
new linux simply look at '03_use_the_new_linux,



Appendix
--------

To run a command in background and still allow SSH to disconnect:
> nohup <command> [<input/output redirection>] &





Partially based on: http://www.pobot.org/ROS-sur-RaspberryPi.html?lang=fr
Written by RaphaÃ«l Lallement, <raphael . lallement [at] laposte . net>
Last update 05/10/2015
